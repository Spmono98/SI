pragma solidity ^0.4.0;
contract Apuntty {
    address creador = 0xa4cDaF472705126715a255E056bb0958a5094Ac7; 
    string[] passwd = ["123"]; 
    address[] clientes = [0xFc6032066D83ee407ae7748DDc075A9B547cF58B];
    mapping(address => uint) DineroCliente; 
    uint monedaTotal = 0; 
    uint precioApuntes = 1; 
    
    
    
    function descargarLlaves(uint passwdNum) public puedeDescargar returns (string contra ){
        DineroCliente[msg.sender] -= precioApuntes; 
        contra = passwd[passwdNum];
    }
    
    function comprar() payable puedePagar {
        DineroCliente[msg.sender] += msg.value; 
        monedaTotal += msg.value; 
        
    }
    function nuevoCliente(address clienteNuevo) public puedeCobrar {
        clientes.length++; 
        for(uint i = 0; i< clientes.length; i++){
        }
        clientes[i] = clienteNuevo; 
    }
    function nuevaContra(string nuevaPassw) public puedeCobrar{
        passwd.length++; 
        for(uint i = 0; i < passwd.length; i++){
        }
        passwd[i] = nuevaPassw; 
 
    }
    function cobrar() public puedeCobrar{
            msg.sender.transfer(monedaTotal);
            monedaTotal = 0; 
        
    }
    modifier puedeCobrar() {
        bool puede = false; 
        if (creador == msg.sender)
            puede = true; 
        require(puede);
        _; 
    }
    modifier puedeDescargar() {
        bool puede = false; 
        uint totalEnviado = DineroCliente[msg.sender];
        if (totalEnviado > precioApuntes){
            puede = true; 
        }
        require(puede);
        _; 
    }
    modifier puedePagar(){
        bool puede = false; 
        for(uint i = 0; i < clientes.length;i++){
            if (clientes[i] == msg.sender){
                puede= true;
            }
        }
        require(puede);
        _; 
    }
}
